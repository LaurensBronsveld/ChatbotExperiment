from pydantic import BaseModel, Field
from typing_extensions import TypedDict
from typing import List, Optional, Union
from uuid import UUID

class ResponseModel(BaseModel):
    response: str = Field(description= "The answer generated by the LLM in response to the user's question")
    sources: List[str] = Field(description= "List of sources used by the LLM to answer the question, should provide links to handbook pages it references")

class QueryModel(BaseModel):
    query: str = Field(description = "The question posed to the chatbot by the user")
    use_rag: bool = Field(default = True, description = "Boolean whether the LLM should use RAG to answer the question")
    use_ddrg: bool = Field(default = False, description = "Boolean whether the LLM should browse the web to answer the question")




# models for chat requests
class Tool(BaseModel):
    name: str 
    enabled: bool

class metadata(BaseModel):
    language: str = Field(description = "Language in which the user's question is written and in which the Assistant should respond")
    session_id: Optional[UUID] = Field(description = "session id which can be used to retrieve conversation history later. Should be generated at the start of each new conversation")
    tools: List[dict] = Field(description = "List of tools the LLM agent can use.")


class UserModel(BaseModel):
    question: str   
    context: List[dict]

class RequestModel(BaseModel):
    metadata: object
    user: object

# models for chat response

class ResponseDict(TypedDict, total=False):
    response: str = Field(description= "The answer generated by the LLM in response to the user's question")
    sources: List[str] = Field(description= "List of sources used by the LLM to answer the question, should provide links to handbook pages it references")