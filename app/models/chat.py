from pydantic import BaseModel, Field
from typing_extensions import TypedDict
from typing import List

class ResponseModel(BaseModel):
    response: str = Field(description= "The answer generated by the LLM in response to the user's question")
    sources: List[str] = Field(description= "List of sources used by the LLM to answer the question, should provide links to handbook pages it references")

class QueryModel(BaseModel):
    query: str = Field(description = "The question posed to the chatbot by the user")
    use_rag: bool = Field(default = True, description = "Boolean whether the LLM should use RAG to answer the question")
    use_ddrg: bool = Field(default = False, description = "Boolean whether the LLM should browse the web to answer the question")

class ResponseDict(TypedDict, total=False):
    response: str = Field(description= "The answer generated by the LLM in response to the user's question")
    sources: List[str] = Field(description= "List of sources used by the LLM to answer the question, should provide links to handbook pages it references")

class metadata(TypedDict, total=False):
    language: str
    session_id: int
    tools: List[dict]

class RequestModel(TypedDict, total=False):
    metadata: object